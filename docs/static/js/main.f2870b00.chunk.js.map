{"version":3,"sources":["Components/Header.js","Components/Formulario.js","Components/Error.js","Components/Clima.js","Components/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","ref","id","type","htmlFor","defaultValue","Component","Error","mensaje","prpTypes","PropTypes","string","isRequired","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcon","concat","icon","temp","toFixed","src","alt","temp_max","temp_min","App","state","error","consulta","consultarAPI","_this$state$consulta","url","fetch","then","resp","json","data","setState","catch","console","prevProps","prevState","cod","Components_Error","Components_Clima","Components_Header","Components_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2870b00.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) => {\n    return (\n        <div>\n            <nav>\n                <div className=\"nav-wrapper light-blue darken-2\">\n                    <div className=\"brand-logo\">{props.titulo}</div>\n                </div>\n            </nav>\n        </div>\n    );\n};\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Formulario extends Component {\n    // Crear los refs\n    ciudadRef = React.createRef();\n    paisRef = React.createRef();\n\n    buscarClima = (e) => {\n        e.preventDefault();\n\n        // Leer los refs y crear el objeto\n        const respuesta  = {\n            ciudad: this.ciudadRef.current.value,\n            pais: this.paisRef.current.value\n        };\n\n        // Enviar por props\n        this.props.datosConsulta(respuesta);\n\n        // Opcional reseteaar el form\n    }\n    \n    render() { \n        return ( \n            <div className=\"contenedor-form\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <form onSubmit={this.buscarClima}>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <input ref={this.ciudadRef} id=\"ciudad\" type=\"text\" />\n                                <label htmlFor=\"ciudad\">Ciudad:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <select ref={this.paisRef} id=\"pais\">\n                                    <option value=\"\" defaultValue>Elige un país</option>\n                                    <option value=\"AR\">Argentina</option>\n                                    <option value=\"CO\">Colombia</option>\n                                    <option value=\"CR\">Costa Rica</option>\n                                    <option value=\"ES\">España</option>\n                                    <option value=\"US\">Estados Unidos</option>\n                                    <option value=\"MX\">México</option>\n                                    <option value=\"PE\">Perú</option>\n                                </select>\n                                <label htmlFor=\"pais\">País:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\n                                <input type=\"submit\" className=\"waves-effect waves-light btn btn-large yellow accent-4\" value=\"Buscar...\" />\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nFormulario.propTypes = {\n    datosConsulta: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        {props.mensaje}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\nError.prpTypes = {\n    mensaje: PropTypes.string.isRequired\n}\n \nexport default Error;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Clima extends Component {\n    mostrarResultado = () => {\n        // Obtener los datos de la consulta\n        const {name, weather, main} = this.props.resultado;\n        \n        if (!name || !weather || !main) return;\n\n        const kelvin = 273.15;\n        const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\n\n        return(\n           <div className=\"row\">\n            <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                <div className=\"card-panel light-blue align-center\">\n                    <span className=\"white-text\">\n                        <h2>Resultado Clima de: {name}</h2>\n                        <p className=\"temperatura\">\n                            Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\n                            <img src={urlIcon} alt={`clima de ${name}`}></img>\n                        </p>\n                        <p>Max. {main.temp_max - kelvin} &deg;C</p>\n                        <p>Min. {main.temp_min - kelvin} &deg;C</p>\n                    </span>\n                </div>\n            </div>\n           </div>\n        );\n    };\n    render() { \n        return ( \n            <div className=\"container\">\n                {this.mostrarResultado()}\n            </div>\n        );\n    }\n}\nClima.propTypes = {\n    resultado: PropTypes.object.isRequired\n}\n\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Error from './Error';\nimport Clima from './Clima';\n\n\nclass App extends Component {\n  state = {\n    error: false,\n    consulta: {},\n    resultado: {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.consulta !== this.state.consulta) {\n      this.consultarAPI();\n    }\n  };\n  \n  consultarAPI = () => {\n    const {ciudad, pais} = this.state.consulta;\n    if (!ciudad || !pais) {\n      return;\n    }\n    // Query con Fetch API\n    const appID = '06dc933a0f6d55f2b7c9c632c17f3d54';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appID}`;\n\n    // Ejecutar el Query con Fetch API\n    fetch(url)\n      .then( resp => {\n        return resp.json();\n      })\n      .then( data => {\n        this.setState({resultado: data});\n      })\n      .catch(console.error);\n  };\n\n  datosConsulta = (respuesta) => {\n    if (respuesta.ciudad === '' || respuesta.pais === '') {\n      this.setState({error: true, consulta: respuesta});\n    } else {\n      this.setState({error: false, consulta: respuesta});\n    }\n  };\n\n  render() {\n    const {error} = this.state;\n    const {cod} = this.state.resultado;\n\n    let resultado ;\n    if(error) {\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\" />\n    } else if (cod === \"404\") {\n      resultado = <Error mensaje=\"Ciudad No Encontrada\" />\n    } else {\n      resultado = <Clima resultado={this.state.resultado} />\n    }\n    return (\n      <div className=\"App\">\n        <Header titulo=\"Clima React\"/>\n        <Formulario datosConsulta={this.datosConsulta} />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}